/**
 * Definition of ParentTreeNode:
 * 
 * class ParentTreeNode {
 *     public ParentTreeNode parent, left, right;
 * }
 */


public class Solution {
    /*
     * @param root: The root of the tree
     * @param A: node in the tree
     * @param B: node in the tree
     * @return: The lowest common ancestor of A and B
     */
    public ParentTreeNode lowestCommonAncestorII(ParentTreeNode root, ParentTreeNode A, ParentTreeNode B) {
        // write your code here
        
        Set<ParentTreeNode> visited = new HashSet<>();
        
        ParentTreeNode ancestorOfA = A;
        while (ancestorOfA != null && ancestorOfA != root) {
            visited.add(ancestorOfA);
            ancestorOfA = ancestorOfA.parent;
        }
        if (ancestorOfA == root) {
            visited.add(ancestorOfA);
        }
        
        ParentTreeNode ancestorOfB = B;
        while (ancestorOfB != null) {
            if (visited.contains(ancestorOfB)) {
                break;
            }
            ancestorOfB = ancestorOfB.parent;
        }
        
        return ancestorOfB;
    }
}