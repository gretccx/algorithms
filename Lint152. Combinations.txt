public class Solution {
    /**
     * @param n: Given the range of numbers
     * @param k: Given the numbers of combinations
     * @return: All the combinations of k numbers out of 1..n
     */
    public List<List<Integer>> combine(int n, int k) {
        // write your code here
        List<List<Integer>> combinations = new ArrayList<>();
        
        if (n < 1 || k < 0) {
            return combinations;
        }
        
        helper(n, k, 1, new ArrayList<>(), combinations);
        return combinations;
    }
    
    private void helper(int n,
                        int k,
                        int start,
                        List<Integer> combination,
                        List<List<Integer>> combinations) {
        
        if (k == 0) {
            combinations.add(new ArrayList<Integer>(combination));
            return;
        }
        
        for (int i = start; i < n + 1 && i + k < n + 2; i++) {
            combination.add(i);
            helper(n, k - 1, i + 1, combination, combinations);
            combination.remove(combination.size() - 1);
        }
    }
}