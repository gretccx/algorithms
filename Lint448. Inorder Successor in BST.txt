方法一：non-recursion

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */


public class Solution {
    /*
     * @param root: The root of the BST.
     * @param p: You need find the successor node of p.
     * @return: Successor of p.
     */
    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
        // write your code here
        TreeNode successor = null;
        
        while (root != null && root.val != p.val) {
            if (root.val < p.val) {
                root = root.right;
            } else {
                successor = root;
                root = root.left;
            }
        }
        
        if (root == null) {
            return null;
        }
        
        // found p
        if (root.right == null) {
            return successor;
        }
        
        // root.right != null
        root = root.right;
        while (root.left != null) {
            root = root.left;
        }
        return root;
    }
}




方法二：non-recursion，太复杂

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */


public class Solution {
    /*
     * @param root: The root of the BST.
     * @param p: You need find the successor node of p.
     * @return: Successor of p.
     */
    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
        // write your code here
        if (root == null) {
            return null;
        }
        Stack<TreeNode> stack = new Stack<>();
        
        while (root != null) {
            stack.push(root);
            root = root.left;
        }
        
        TreeNode curr = stack.peek();
        TreeNode next = stack.peek();
        while (next != null && next.val <= p.val) {
            
            curr = stack.peek();
            TreeNode node = curr;
            
            if (node.right == null) {
                node = stack.pop();
                while (!stack.isEmpty() && stack.peek().right == node) {
                    node = stack.pop();
                }
            } else {
                node = node.right;
                while (node != null) {
                    stack.push(node);
                    node = node.left;
                }
            }
            
            if (!stack.isEmpty()) {
                next = stack.peek();
            } else {
                next = null;
            }
        }
        
	if (curr == p) {
            return next;
        }
        return null;
    }
}




方法三：recursion，太容易

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */


public class Solution {
    /*
     * @param root: The root of the BST.
     * @param p: You need find the successor node of p.
     * @return: Successor of p.
     */
    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
        // write your code here
        if (root == null) {
            return null;
        }
        
        if (root.val <= p.val) {
            return inorderSuccessor(root.right, p);
        }
        
        // root.val > p.val
        TreeNode left = inorderSuccessor(root.left, p);
        return left == null ? root : left;
    }
}