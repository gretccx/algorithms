
方法一：base
使用 Binary Search Tree Iterator 的方式（参考 Lint86. Binary Search Tree Iterator）
用 stack，从第一个点开始，走 k-1 步，就是第 k 个点了。
时间复杂度是 O(h + k) ，h 是树的高度。

/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */

public class Solution {
    /**
     * @param root: the given BST
     * @param k: the given k
     * @return: the kth smallest element in BST
     */
    public int kthSmallest(TreeNode root, int k) {
        // write your code here
        if (root == null) {
            return 0;
        }
        
        Stack<TreeNode> stack = new Stack<>();
        while (root != null) {
            stack.push(root);
            root = root.left;
        }
        
        for (int i = 1; i < k; i++) {
            TreeNode node = stack.peek();
            
            if (node.right == null) {
                node = stack.pop();
                while (!stack.isEmpty() && stack.peek().right == node) {
                    node = stack.pop();
                }
            } else {
                node = node.right;
                while (node != null) {
                    stack.push(node);
                    node = node.left;
                }
            }
        }
        
        if (!stack.isEmpty()) {
            return stack.peek().val;
        }
        return 0;
    }
}




方法二：
时间复杂度 O(n) ，最好最坏都是。
算法思想类似于 Quick Select。
这个算法的好处是，如果多次查询的话，给每个节点统计儿子个数这个过程只需要做一次。查询可以很快。

/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */

public class Solution {
    /**
     * @param root: the given BST
     * @param k: the given k
     * @return: the kth smallest element in BST
     */
    public int kthSmallest(TreeNode root, int k) {
        // write your code here
        Map<TreeNode, Integer> map = new HashMap<>();
        countNodes(root, map);
        TreeNode res = quickSelectOnTree(root, k, map);
        return res == null ? 0 : res.val;
    }
    
    private int countNodes(TreeNode root, Map map) {
        if (root == null) {
            return 0;
        }
        
        int left = countNodes(root.left, map);
        int right = countNodes(root.right, map);
        int count = left + right + 1;
        
        map.put(root, count);
        return count;
    }
    
    private TreeNode quickSelectOnTree(TreeNode root, int k, Map map) {
        if (root == null || k < 1) {
            return null;
        }
        
        int left = root.left == null ? 0 : (int)map.get(root.left);
        
        if (left < k - 1) {
            return quickSelectOnTree(root.right, k - left - 1, map);
        }
        if (left > k - 1) {
            return quickSelectOnTree(root.left, k, map);
        }
        return root;
    }
}