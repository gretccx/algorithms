public class Solution {
    /**
     * @param candidates: A list of integers
     * @param target: An integer
     * @return: A list of lists of integers
     */
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        // write your code here
        
        List<List<Integer>> results = new ArrayList<>();
        
        if (candidates == null || candidates.length == 0) {
            return results;
        }
        
        int[] nums = deDuplication(candidates);
        
        helper(nums, target, 0, new ArrayList<>(), results);
        return results;
    }
    
    private void helper(int[] nums,
                        int target,
                        int startIndex,
                        ArrayList<Integer> subset,
                        List<List<Integer>> results) {
        
        if (target == 0) {
            results.add(new ArrayList<>(subset));
            return;
        }
        
        for (int i = startIndex; i < nums.length; i++) {
            if (nums[i] > target) {
                break;      // nuns is sorted
            }
            
            subset.add(nums[i]);
            helper(nums, target - nums[i], i, subset, results);
            subset.remove(subset.size() - 1);
        }
    }
    
    private int[] deDuplication(int[] nums) {
        
        Arrays.sort(nums);
        int len = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != nums[len]) {
                nums[++len] = nums[i];
            }
        }
        
        int[] results = new int[len + 1];
        for (int i = 0; i < len + 1; i++) {
            results[i] = nums[i];
        }
        
        return results;
    }
}